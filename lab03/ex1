## 1.What do the .data, .word, .text directives mean (i.e. what do you use them for)? Hint: think about the 4 sections of memory.
1).data:
The .data directive is used to define the data section of the program. It is where data (variables) is declared and stored. This section typically contains initialized data.
In your code, it's used to declare the following data:
    .word 2, 4, 6, 8: This line initializes an array of words (32-bit values) with the values 2, 4, 6, and 8.
    n: .word 9: This line defines a label n for a word with the value 9.
2).word:
The .word directive is used to define a word in memory. A word is typically a 32-bit (4-byte) data item. It can represent an integer value or other data types.
In your code, it is used to initialize the values in the data section.
3).text:
The .text directive is used to define the text (code) section of the program. It is where the program's instructions are written.
In your code, it's used to define the main label, which is the starting point of your program.

## 2. Run the program to completion. What number did the program output? What does this number represent?
3434 the address of this instruction.
## 3. At what address is n stored in memory? Hint: Look at the contents of the registers.
The variable n is stored in memory at the address specified by the label n, which can be obtained by calculating the address of the label. 
In this case, the `la` instruction is used to load the address of n into t3, so t3 holds the address of n.
Without actually editing the code (i.e. without going into the “Editor” tab), have the program calculate the 13th fib number (0-indexed) by manually modifying the value of a register. You may find it helpful to first step through the code. If you prefer to look at decimal values, change the “Display Settings” option at the bottom.